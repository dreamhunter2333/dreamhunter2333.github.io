import{_ as s,c as a,o as e,aj as i}from"./chunks/framework.Cy5U5pv3.js";const m=JSON.parse('{"title":"年轻人的第一个 Rust WebAssembly 项目 for Vue and Cloudflare Workers","description":"","frontmatter":{"title":"年轻人的第一个 Rust WebAssembly 项目 for Vue and Cloudflare Workers","date":"2024-05-04 13:57:23","categories":["frontend"],"tags":["frontend","rust","wasm","cloudflare"]},"headers":[],"relativePath":"posts/frontend/rust-wasm.md","filePath":"posts/frontend/rust-wasm.md","lastUpdated":1720520198000}'),t={name:"posts/frontend/rust-wasm.md"},r=i(`<h1 id="年轻人的第一个-rust-webassembly-项目-for-vue-and-cloudflare-workers" tabindex="-1">年轻人的第一个 Rust WebAssembly 项目 for Vue and Cloudflare Workers <a class="header-anchor" href="#年轻人的第一个-rust-webassembly-项目-for-vue-and-cloudflare-workers" aria-label="Permalink to &quot;年轻人的第一个 Rust WebAssembly 项目 for Vue and Cloudflare Workers&quot;">​</a></h1><h2 id="npm-包" tabindex="-1">npm 包 <a class="header-anchor" href="#npm-包" aria-label="Permalink to &quot;npm 包&quot;">​</a></h2><p>这里是基于 <code>Rust WebAssembly</code> 编写的 <code>mail-parser</code> npm 包，分别支持 <code>Vue</code> 和 <code>Cloudflare Workers</code></p><ul><li><a href="https://www.npmjs.com/package/mail-parser-wasm" target="_blank" rel="noreferrer">mail-parser-wasm</a></li><li><a href="https://www.npmjs.com/package/mail-parser-wasm-worker" target="_blank" rel="noreferrer">mail-parser-wasm-worker</a></li></ul><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>去年基于 cloudflare 做了个临时邮箱服务，<a href="https://github.com/dreamhunter2333/cloudflare_temp_email" target="_blank" rel="noreferrer">dreamhunter2333/cloudflare_temp_email</a></p><p>尝试了一些 <code>node</code> 生态的 mail 解析库，总有大大小小的问题(<code>mail-parser</code>/<code>postal-mime</code>)</p><p>所以想尝试一下 <code>Rust WebAssembly</code> 来解析邮件</p><h2 id="开发步骤" tabindex="-1">开发步骤 <a class="header-anchor" href="#开发步骤" aria-label="Permalink to &quot;开发步骤&quot;">​</a></h2><blockquote><p>开发环境: macOS</p></blockquote><p>跟着官方文档走，<a href="https://rustwasm.github.io/book/" target="_blank" rel="noreferrer">Rust and WebAssembly</a></p><h3 id="安装-rustup-和-wasm-pack" tabindex="-1">安装 <code>rustup</code> 和 <code>wasm-pack</code> <a class="header-anchor" href="#安装-rustup-和-wasm-pack" aria-label="Permalink to &quot;安装 \`rustup\` 和 \`wasm-pack\`&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rustup-init</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rustup-init</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm-pack</span></span></code></pre></div><h3 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h3><p>源码: <a href="https://github.com/dreamhunter2333/cloudflare_temp_email/tree/main/mail-parser-wasm" target="_blank" rel="noreferrer">mail-parser-wasm</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --lib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mail-parser-wasm</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mail-parser-wasm</span></span></code></pre></div><p>只需要编写一个 <code>src/lib.rs</code> 文件即可</p><h3 id="编译并发布" tabindex="-1">编译并发布 <a class="header-anchor" href="#编译并发布" aria-label="Permalink to &quot;编译并发布&quot;">​</a></h3><p>对于 <code>Vue</code> 项目，直接使用下面命令即可</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasm-pack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --release</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># wasm-pack publish</span></span></code></pre></div><h3 id="为-cloudflare-workers-项目编译" tabindex="-1">为 <code>Cloudflare Workers</code> 项目编译 <a class="header-anchor" href="#为-cloudflare-workers-项目编译" aria-label="Permalink to &quot;为 \`Cloudflare Workers\` 项目编译&quot;">​</a></h3><p>参考下面的命令，在 <a href="https://github.com/dreamhunter2333/cloudflare_temp_email/tree/main/mail-parser-wasm/worker" target="_blank" rel="noreferrer">mail-parser-wasm/worker</a> 目录中，我为 <code>Cloudflare Workers</code> 做了特殊处理</p><p>编译 web 版本的产出到 web 目录，然后将除了 json 文件和 gitignore 文件之外的文件拷贝到 worker 目录，此时 worker 目录就是最终的产出，可以在 <code>Cloudflare Workers</code> 项目中直接使用。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasm-pack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --out-dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --release</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;*.json&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.gitignore&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> worker/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pnpm publish worker --no-git-checks</span></span></code></pre></div>`,24),l=[r];function n(p,h,o,d,k,c){return e(),a("div",null,l)}const F=s(t,[["render",n]]);export{m as __pageData,F as default};
