import{_ as s,c as a,o as n,aj as i}from"./chunks/framework.B4uOnG9Z.js";const E=JSON.parse('{"title":"Odoo one2many many2many 写值规则","description":"","frontmatter":{"title":"Odoo one2many many2many 写值规则","date":"2019-08-21 14:56:14","tags":["odoo","one2many","many2many"],"categories":"odoo"},"headers":[],"relativePath":"posts/odoo/Odoo-one2many-many2many-write-rule.md","filePath":"posts/odoo/Odoo-one2many-many2many-write-rule.md","lastUpdated":1719555429000}'),e={name:"posts/odoo/Odoo-one2many-many2many-write-rule.md"},t=i(`<h1 id="odoo-one2many-many2many-写值规则" tabindex="-1">Odoo one2many many2many 写值规则 <a class="header-anchor" href="#odoo-one2many-many2many-写值规则" aria-label="Permalink to &quot;Odoo one2many many2many 写值规则&quot;">​</a></h1><h2 id="odoo-one2many-many2many-写值规则-1" tabindex="-1">Odoo one2many many2many 写值规则 <a class="header-anchor" href="#odoo-one2many-many2many-写值规则-1" aria-label="Permalink to &quot;Odoo one2many many2many 写值规则&quot;">​</a></h2><p>odoo12以后one2many many2many 写值规则基本相同</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># many2many</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 根据values里面的信息新建一个记录。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0,0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{values}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新id=ID的记录（写入values里面的数据）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1,ID,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{values}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除id=ID的数据（调用unlink方法，删除数据以及整个主从数据链接关系）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2,ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切断主从数据的链接关系但是不删除这个数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3,ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 为id=ID的数据添加主从链接关系。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4,ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除所有的从数据的链接关系就是向所有的从数据调用(3,ID)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用IDs里面的记录替换原来的记录（就是先执行(5)再执行循环IDs执行（4,ID））</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">6,0,[IDs]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,4),l=[t];function h(p,o,k,d,y,r){return n(),a("div",null,l)}const c=s(e,[["render",h]]);export{E as __pageData,c as default};
