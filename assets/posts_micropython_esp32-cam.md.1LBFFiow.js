import{_ as s,c as i,o as a,aj as e,az as n}from"./chunks/framework.Cy5U5pv3.js";const m=JSON.parse('{"title":"为 ESP32-CAM 编译支持 camera 的 MicroPython 固件","description":"","frontmatter":{"title":"为 ESP32-CAM 编译支持 camera 的 MicroPython 固件","date":"2024-07-04 11:08:13","categories":["micropython"],"tags":["micropython"]},"headers":[],"relativePath":"posts/micropython/esp32-cam.md","filePath":"posts/micropython/esp32-cam.md","lastUpdated":1720250042000}'),t={name:"posts/micropython/esp32-cam.md"},p=e('<h1 id="为-esp32-cam-编译支持-camera-的-micropython-固件" tabindex="-1">为 ESP32-CAM 编译支持 camera 的 MicroPython 固件 <a class="header-anchor" href="#为-esp32-cam-编译支持-camera-的-micropython-固件" aria-label="Permalink to &quot;为 ESP32-CAM 编译支持 camera 的 MicroPython 固件&quot;">​</a></h1><p><img src="'+n+`" alt="esp32-cam"></p><p>最近买了几个 <code>ESP32</code> 开发板，刷了 <code>MicroPython</code> 固件，体验下来非常好，但是 <code>ESP32-CAM</code> 的 <code>MicroPython</code> 固件不支持 <code>camera</code> 模块，所以就自己编译了一个支持 <code>camera</code> 的 <code>MicroPython</code> 固件。</p><p>于是一番搜索，找到了一个支持 <code>camera</code> 的 <code>MicroPython</code> 的仓库: <a href="https://github.com/lemariva/micropython-camera-driver" target="_blank" rel="noreferrer">lemariva/micropython-camera-driver</a></p><p>我参考这个仓库的 <code>README</code> 编译了一个支持 <code>camera OV5640</code> 的最新版 <code>MicroPython</code> 固件。</p><h2 id="编译环境" tabindex="-1">编译环境 <a class="header-anchor" href="#编译环境" aria-label="Permalink to &quot;编译环境&quot;">​</a></h2><ul><li>操作系统: <code>Ubuntu 20.04</code> 我使用了 <code>WSL2</code> 编译</li><li><code>ESP-IDF</code> 版本: <code>v5.0.4</code></li><li><a href="https://github.com/espressif/esp32-camera" target="_blank" rel="noreferrer">espressif/esp32-camera</a>: 最新版</li><li><a href="https://github.com/micropython/micropython" target="_blank" rel="noreferrer">micropython/micropython</a>: 最新版</li></ul><h2 id="编译步骤" tabindex="-1">编译步骤 <a class="header-anchor" href="#编译步骤" aria-label="Permalink to &quot;编译步骤&quot;">​</a></h2><p>参考 <a href="https://github.com/micropython/micropython/blob/master/ports/esp32/README.md" target="_blank" rel="noreferrer">esp32/README.md</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esp32-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esp32-src</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载 lemariva/micropython-camera-driver</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/lemariva/micropython-camera-driver.git</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载 esp-idf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v5.0.4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/espressif/esp-idf.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esp-idf/components</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载 esp32-camera</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/espressif/esp32-camera.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./install.sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置环境变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export.sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到 esp32-src 目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制 micropython-camera-driver/boards/ESP32_CAM 到 micropython/ports/esp32/boards</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> micropython-camera-driver/boards/ESP32_CAM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> micropython/ports/esp32/boards/ESP32_CAM</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到 micropython esp32 目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> micropython/ports/esp32</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化 submodules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodules</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编译</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> USER_C_MODULES=../../../../micropython-camera-driver/src/micropython.cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BOARD=ESP32_CAM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span></span></code></pre></div><h2 id="进阶修改" tabindex="-1">进阶修改 <a class="header-anchor" href="#进阶修改" aria-label="Permalink to &quot;进阶修改&quot;">​</a></h2><p>此时应该会遇到一个错误: <code>STATIC</code> 关键词不存在，到 micropython-camera-driver 目录，搜索 <code>STATIC</code> 替换为 <code>static</code>，然后重新编译。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> USER_C_MODULES=../../../../micropython-camera-driver/src/micropython.cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BOARD=ESP32_CAM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span></span></code></pre></div><p>如果是为 <code>OV5640</code> 或者其他摄像头编译，可以修改 <code>micropython-camera-driver/boards/ESP32_CAM/sdkconfig.esp32cam</code> 文件，修改 <code>CONFIG_OV2640_SUPPORT=y</code> 为 <code>CONFIG_OV5640_SUPPORT=y</code>，然后重新编译。</p><p>编译完成后，会在 <code>build-ESP32-CAM</code> 目录生成 <code>firmware.bin</code> 文件，这个文件就是编译好的 <code>MicroPython</code> 固件。</p><h2 id="烧录固件" tabindex="-1">烧录固件 <a class="header-anchor" href="#烧录固件" aria-label="Permalink to &quot;烧录固件&quot;">​</a></h2><p>使用 <code>esptool.py</code> 或者 <code>Thonny</code> 烧录固件。</p><h2 id="编写测试代码" tabindex="-1">编写测试代码 <a class="header-anchor" href="#编写测试代码" aria-label="Permalink to &quot;编写测试代码&quot;">​</a></h2><p>写到 <code>main.py</code> 文件中, 重启执行测试即可。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camera</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">camera.init(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">camera.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JPEG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fb_location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">camera.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PSRAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">camera.mirror(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># buf 是 bytes 的图片，可以直接保存到文件或者通过 http 返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camera.capture()</span></span></code></pre></div>`,20),h=[p];function l(r,o,c,k,d,y){return a(),i("div",null,h)}const g=s(t,[["render",l]]);export{m as __pageData,g as default};
