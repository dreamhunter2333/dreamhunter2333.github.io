import{_ as a,c as i,o as s,aj as e}from"./chunks/framework.BF2cowCO.js";const g=JSON.parse('{"title":"Odoo @api.* 装饰器","description":"","frontmatter":{"title":"Odoo @api.* 装饰器","date":"2019-08-19 18:37:22","tags":["odoo","api"],"categories":"odoo"},"headers":[],"relativePath":"posts/odoo/Odoo-api-decorators.md","filePath":"posts/odoo/Odoo-api-decorators.md","lastUpdated":1719505249000}'),t={name:"posts/odoo/Odoo-api-decorators.md"},n=e(`<h1 id="odoo-api-装饰器" tabindex="-1">Odoo @api.* 装饰器 <a class="header-anchor" href="#odoo-api-装饰器" aria-label="Permalink to &quot;Odoo @api.* 装饰器&quot;">​</a></h1><h2 id="api-one" tabindex="-1">@api.one <a class="header-anchor" href="#api-one" aria-label="Permalink to &quot;@api.one&quot;">​</a></h2><blockquote><p>one的用法主要用于self为单一记录的情况，self仅代表当前正在操作的记录。</p></blockquote><h2 id="api-multi" tabindex="-1">@api.multi <a class="header-anchor" href="#api-multi" aria-label="Permalink to &quot;@api.multi&quot;">​</a></h2><blockquote><p>multi则指self是多个记录的合集。因此，常使用for—in语句遍历self。 multi通常用于：在tree视图中点选多条记录，然后执行某方法，那么那个方法必须用@api.multi修饰，而参数中的self则代表选中的多条记录。 如果仅仅是在form视图下操作，那么self中通常只有当前正在操作的记录。</p></blockquote><h2 id="api-model" tabindex="-1">@api.model <a class="header-anchor" href="#api-model" aria-label="Permalink to &quot;@api.model&quot;">​</a></h2><blockquote><p>此时的self仅代表模型本身，不含任何记录信息。</p></blockquote><h2 id="api-contrains" tabindex="-1">@api.contrains <a class="header-anchor" href="#api-contrains" aria-label="Permalink to &quot;@api.contrains&quot;">​</a></h2><blockquote><p>在保存时对字段进行约束。 抛出异常不能保存</p></blockquote><h2 id="api-depends-xxx" tabindex="-1">@api.depends(&#39;xxx&#39;) <a class="header-anchor" href="#api-depends-xxx" aria-label="Permalink to &quot;@api.depends(&#39;xxx&#39;)&quot;">​</a></h2><blockquote><p>使用compute参数计算字段时。它必须将计算值分配给字段。<br> 如果它使用其他字段的值，则应使用<code>@api.depends()</code>指定这些字段</p></blockquote><h2 id="api-onchange-动态更新ui" tabindex="-1">@api.onchange：动态更新UI <a class="header-anchor" href="#api-onchange-动态更新ui" aria-label="Permalink to &quot;@api.onchange：动态更新UI&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@api.onchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onchange_demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 循环多条记录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 判断字段是否存在</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rec.demo:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rec.demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 弱提醒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warning&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}</span></span></code></pre></div><blockquote><p>当用户更改表单中的字段值（但尚未保存表单）时，根据该值自动更新其他字段可能很有用， 计算字段会自动检查并重新计算，它们不需要 onchange 对于非计算字段，onchange()装饰器用于提供新的字段值： 可以通过on_change=&quot;0&quot;在视图中添加来禁止来自特定字段的触发器 ：</p></blockquote><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">field</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><blockquote><p>警告: one2many或many2manyfield 不可能通过onchange修改自身</p></blockquote><h2 id="api-returns" tabindex="-1">@api.returns <a class="header-anchor" href="#api-returns" aria-label="Permalink to &quot;@api.returns&quot;">​</a></h2><blockquote><p>returns的用法主要是用来指定返回值的格式，它接受三个参数:<br> 第一个为返回值的model 第二个为向下兼容的method 第三个为向上兼容的method</p></blockquote>`,18),l=[n];function p(h,o,k,d,r,c){return s(),i("div",null,l)}const u=a(t,[["render",p]]);export{g as __pageData,u as default};
