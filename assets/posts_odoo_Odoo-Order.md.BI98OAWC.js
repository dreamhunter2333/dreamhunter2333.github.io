import{_ as a,c as s,o as e,aj as o}from"./chunks/framework.B4uOnG9Z.js";const E=JSON.parse('{"title":"Odoo Order 排序","description":"","frontmatter":{"title":"Odoo Order 排序","date":"2019-09-10 18:51:28","tags":["odoo"],"categories":"odoo"},"headers":[],"relativePath":"posts/odoo/Odoo-Order.md","filePath":"posts/odoo/Odoo-Order.md","lastUpdated":1719593024000}'),i={name:"posts/odoo/Odoo-Order.md"},r=o(`<h1 id="odoo-order-排序" tabindex="-1">Odoo Order 排序 <a class="header-anchor" href="#odoo-order-排序" aria-label="Permalink to &quot;Odoo Order 排序&quot;">​</a></h1><h2 id="类中的-order" tabindex="-1">类中的 _order <a class="header-anchor" href="#类中的-order" aria-label="Permalink to &quot;类中的 _order&quot;">​</a></h2><blockquote><p><code>_order</code>字符串的语法类似于SQL中的<code>ORDER BY</code></p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">models</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;library.book&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Library&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;date desc, name&#39;</span></span></code></pre></div><h2 id="search-中的-order" tabindex="-1">search()中的 order <a class="header-anchor" href="#search-中的-order" aria-label="Permalink to &quot;search()中的 order&quot;">​</a></h2><blockquote><p><code>order=sort_specification</code> 它用于强制所返回记录集的排序。默认，排序通过模型类的<code>_order</code>属性给定</p></blockquote><h2 id="read-group-中的-order" tabindex="-1">read_group()中的 order <a class="header-anchor" href="#read-group-中的-order" aria-label="Permalink to &quot;read_group()中的 order&quot;">​</a></h2><blockquote><p><code>orderby</code>如果传递了该选项，结果会根据给定字段进行排序</p></blockquote>`,8),t=[r];function d(n,h,l,p,c,k){return e(),s("div",null,t)}const g=a(i,[["render",d]]);export{E as __pageData,g as default};
