import{_ as a,c as t,o as i,aj as e}from"./chunks/framework.q8cpVy6V.js";const m=JSON.parse('{"title":"消息队列的高可用","description":"","frontmatter":{"title":"消息队列的高可用","date":"2021-03-16 23:53:42","categories":["mq"],"tags":["mq"]},"headers":[],"relativePath":"posts/mq/high-availability-of-mq.md","filePath":"posts/mq/high-availability-of-mq.md","lastUpdated":1720067677000}'),o={name:"posts/mq/high-availability-of-mq.md"},r=e('<h1 id="消息队列的高可用" tabindex="-1">消息队列的高可用 <a class="header-anchor" href="#消息队列的高可用" aria-label="Permalink to &quot;消息队列的高可用&quot;">​</a></h1><h2 id="rabbitmq-的高可用性" tabindex="-1">RabbitMQ 的高可用性 <a class="header-anchor" href="#rabbitmq-的高可用性" aria-label="Permalink to &quot;RabbitMQ 的高可用性&quot;">​</a></h2><p>RabbitMQ 基于主从（非分布式）做高可用性的</p><p>RabbitMQ 有三种模式</p><ul><li>单机模式 Demo 级别</li><li>普通集群模式（无高可用性）</li><li>镜像集群模式（高可用性）</li></ul><h2 id="kafka-的高可用性" tabindex="-1">Kafka 的高可用性 <a class="header-anchor" href="#kafka-的高可用性" aria-label="Permalink to &quot;Kafka 的高可用性&quot;">​</a></h2><p>Kafka 一个最基本的架构认识：由多个 broker 组成，每个 broker 是一个节点；你创建一个 topic，这个 topic 可以划分为多个 partition，每个 partition 可以存在于不同的 broker 上，每个 partition 就放一部分数据。</p><p>这就是天然的分布式消息队列，就是说一个 topic 的数据，是分散放在多个机器上的，每个机器就放一部分数据。</p>',8),l=[r];function s(n,c,h,p,_,b){return i(),t("div",null,l)}const f=a(o,[["render",s]]);export{m as __pageData,f as default};
